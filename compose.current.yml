version: "3.0"

networks:
  webapp:
    driver: bridge

services:
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: unless-stopped
    # UNCOMMENT THE NEXT LINE AFTER SUCCESS INIT CERTBOT
    #entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    depends_on:
      - proxy
    networks:
      - webapp

  proxy:
    image: nginx:latest
    container_name: poxy
    restart: unless-stopped
    volumes:
      - ./proxy/deploy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./proxy/fallback.html:/var/www/html/custom/fallback.html:rw
      - ./proxy/healthy.html:/var/www/html/custom/healthy.html:rw
      - ./certbot/www:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/nginx/ssl/:rw
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - webapp

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: ./.containerfile
    volumes:
      - fe_node_modules:/var/www/html/node_modules/:ro
      - ./frontend:/var/www/html/:rw
    env_file:
      - ./frontend/.env
    environment:
      CHOKIDAR_USEPOLLING: "true"
      DANGEROUSLY_DISABLE_HOST_CHECK: "true"
    stdin_open: true
    expose:
      - 5701
    restart: on-failure
    networks:
      - webapp

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./.containerfile
    volumes:
      - be_node_modules:/var/www/html/node_modules/:ro
      - ./backend:/var/www/html/:rw
    env_file:
      - ./backend/.env
    depends_on:
      - db
    environment:
      CHOKIDAR_USEPOLLING: "true"
      DANGEROUSLY_DISABLE_HOST_CHECK: "true"
    stdin_open: true
    expose:
      - 5702
    restart: on-failure
    networks:
      - webapp

  db:
    container_name: db
    image: postgres
    build:
      context: ./db
    env_file:
      - ./backend/.env
    volumes:
      - persistent:/var/lib/postgresql/data
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    networks:
      - webapp

volumes:
  persistent:
  fe_node_modules:
  be_node_modules:
